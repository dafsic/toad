// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: proto/kraken_grid/server.proto

package kraken_grid

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	KrakenGridService_Stop_FullMethodName       = "/kraken_grid.KrakenGridService/Stop"
	KrakenGridService_Run_FullMethodName        = "/kraken_grid.KrakenGridService/Run"
	KrakenGridService_Status_FullMethodName     = "/kraken_grid.KrakenGridService/Status"
	KrakenGridService_PlaceOrder_FullMethodName = "/kraken_grid.KrakenGridService/PlaceOrder"
)

// KrakenGridServiceClient is the client API for KrakenGridService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KrakenGridServiceClient interface {
	Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*Response, error)
	Run(ctx context.Context, in *RunRequest, opts ...grpc.CallOption) (*Response, error)
	Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	PlaceOrder(ctx context.Context, in *PlaceOrderRequest, opts ...grpc.CallOption) (*Response, error)
}

type krakenGridServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKrakenGridServiceClient(cc grpc.ClientConnInterface) KrakenGridServiceClient {
	return &krakenGridServiceClient{cc}
}

func (c *krakenGridServiceClient) Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, KrakenGridService_Stop_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *krakenGridServiceClient) Run(ctx context.Context, in *RunRequest, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, KrakenGridService_Run_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *krakenGridServiceClient) Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, KrakenGridService_Status_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *krakenGridServiceClient) PlaceOrder(ctx context.Context, in *PlaceOrderRequest, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, KrakenGridService_PlaceOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KrakenGridServiceServer is the server API for KrakenGridService service.
// All implementations must embed UnimplementedKrakenGridServiceServer
// for forward compatibility.
type KrakenGridServiceServer interface {
	Stop(context.Context, *StopRequest) (*Response, error)
	Run(context.Context, *RunRequest) (*Response, error)
	Status(context.Context, *StatusRequest) (*StatusResponse, error)
	PlaceOrder(context.Context, *PlaceOrderRequest) (*Response, error)
	mustEmbedUnimplementedKrakenGridServiceServer()
}

// UnimplementedKrakenGridServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedKrakenGridServiceServer struct{}

func (UnimplementedKrakenGridServiceServer) Stop(context.Context, *StopRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (UnimplementedKrakenGridServiceServer) Run(context.Context, *RunRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Run not implemented")
}
func (UnimplementedKrakenGridServiceServer) Status(context.Context, *StatusRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (UnimplementedKrakenGridServiceServer) PlaceOrder(context.Context, *PlaceOrderRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlaceOrder not implemented")
}
func (UnimplementedKrakenGridServiceServer) mustEmbedUnimplementedKrakenGridServiceServer() {}
func (UnimplementedKrakenGridServiceServer) testEmbeddedByValue()                           {}

// UnsafeKrakenGridServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KrakenGridServiceServer will
// result in compilation errors.
type UnsafeKrakenGridServiceServer interface {
	mustEmbedUnimplementedKrakenGridServiceServer()
}

func RegisterKrakenGridServiceServer(s grpc.ServiceRegistrar, srv KrakenGridServiceServer) {
	// If the following call pancis, it indicates UnimplementedKrakenGridServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&KrakenGridService_ServiceDesc, srv)
}

func _KrakenGridService_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KrakenGridServiceServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KrakenGridService_Stop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KrakenGridServiceServer).Stop(ctx, req.(*StopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KrakenGridService_Run_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KrakenGridServiceServer).Run(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KrakenGridService_Run_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KrakenGridServiceServer).Run(ctx, req.(*RunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KrakenGridService_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KrakenGridServiceServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KrakenGridService_Status_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KrakenGridServiceServer).Status(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KrakenGridService_PlaceOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlaceOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KrakenGridServiceServer).PlaceOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KrakenGridService_PlaceOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KrakenGridServiceServer).PlaceOrder(ctx, req.(*PlaceOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KrakenGridService_ServiceDesc is the grpc.ServiceDesc for KrakenGridService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KrakenGridService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kraken_grid.KrakenGridService",
	HandlerType: (*KrakenGridServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Stop",
			Handler:    _KrakenGridService_Stop_Handler,
		},
		{
			MethodName: "Run",
			Handler:    _KrakenGridService_Run_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _KrakenGridService_Status_Handler,
		},
		{
			MethodName: "PlaceOrder",
			Handler:    _KrakenGridService_PlaceOrder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/kraken_grid/server.proto",
}
